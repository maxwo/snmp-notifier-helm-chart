restartPolicy: Always

kind: Deployment

image:
  repository: maxwo/snmp-notifier
  tag: v1.3.1
  pullPolicy: IfNotPresent

imagePullSecrets: []
nodeSelector: {}
tolerations: []
affinity: {}

# extraArgs allows to pass SNMP notifier configurations, as described on https://github.com/maxwo/snmp_notifier#snmp-notifier-configuration
extraArgs: []
#  --alert.severity-label=severity

config:
  # snmpDestinations is the list of SNMP servers to send the traps to
  snmpDestinations:
    - snmp-server:162

  # SNMP authentication secrets, that may be instanciated by the chart, or may use an already created secret
  # snmpCommunity: public
  # snmpAuthenticationUsername: my_authention_username
  # snmpAuthenticationPassword: my_authention_password
  # snmpPrivatePassword: my_private_password
  # snmpCommunitySecret:
  #   name: existingsecret
  #   key: community
  # snmpAuthenticationUsernameSecret:
  #   name: existingsecret
  #   key: authenticationUsername
  # snmpAuthenticationPasswordSecret:
  #   name: existingsecret
  #   key: authenticationPassword
  # snmpPrivatePasswordSecret:
  #   name: existingsecret
  #   key: privatePassword

  # snmpTemplates allows to customize the description of the traps, and add extra trap fields
  # snmpTemplates:
  #   description: |
  #     {{- if .Alerts -}}
  #     {{ len .Alerts }}/{{ len .DeclaredAlerts }} alerts are firing:

  #     {{ range $severity, $alerts := (groupAlertsByLabel .Alerts "severity") -}}
  #     Status: {{ $severity }}

  #     {{- range $index, $alert := $alerts }}
  #     - Alert: {{ $alert.Labels.alertname }}
  #       Summary: {{ $alert.Annotations.summary }}
  #       Description: {{ $alert.Annotations.description }}
  #     {{ end }}
  #     {{ end }}
  #     {{ else -}}
  #     Status: OK
  #     {{- end -}}

  #   extraFields:
  #     - template: |
  #         {{- if .Alerts -}}
  #         Status: NOK
  #         {{- else -}}
  #         Status: OK
  #         {{- end -}}
  #     - template: |
  #         This is a constant

## Security context to be added to snmp-notifier pods
securityContext:
  {}
  # fsGroup: 1000
  # runAsUser: 1000
  # runAsNonRoot: true

## Security context to be added to snmp-notifier containers
containerSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  readOnlyRootFilesystem: true

## Additional labels to add to all resources
customLabels:
  {}
  # app: snmp-notifier

extraConfigmapMounts:
  []
  # - name: snmp-notifier-configmap
  #   mountPath: /run/secrets/snmp-notifier
  #   subPath: snmp.yaml # (optional)
  #   configMap: snmp-notifier-configmap-configmap
  #   readOnly: true
  #   defaultMode: 420

## Additional secret mounts
# Defines additional mounts with secrets. Secrets must be manually created in the namespace.
extraSecretMounts:
  []
  # - name: secret-files
  #   mountPath: /run/secrets/snmp-notifier
  #   secretName: snmp-notifier-secret-files
  #   readOnly: true
  #   defaultMode: 420

## For RBAC support:
rbac:
  # Specifies whether RBAC resources should be created
  create: true

serviceAccount:
  # Specifies whether a ServiceAccount should be created
  create: true

  # The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

resources:
  {}
  # limits:
  #   memory: 300Mi
  # requests:
  #   memory: 50Mi

livenessProbe:
  httpGet:
    path: /health
    port: http
readinessProbe:
  httpGet:
    path: /health
    port: http

service:
  annotations: {}
  type: ClusterIP
  port: 9464

## An Ingress resource can provide name-based virtual hosting and TLS
## termination among other things for CouchDB deployments which are accessed
## from outside the Kubernetes cluster.
## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  hosts:
    []
    # - chart-example.local
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  tls:
    []
    # Secrets must be manually created in the namespace.
    # - secretName: chart-example-tls
    #   hosts:
    #     - chart-example.local

podAnnotations: {}

replicas: 1

# Enable this if you're using https://github.com/coreos/prometheus-operator
serviceMonitor:
  # When set true then use a ServiceMonitor to configure scraping
  enabled: false
  # Set the namespace the ServiceMonitor should be deployed
  # namespace: monitoring
  # Set how frequently Prometheus should scrape
  # interval: 30s
  # Set path to cloudwatch-exporter telemtery-path
  # telemetryPath: /metrics
  # Set labels for the ServiceMonitor, use this to define your scrape label for Prometheus Operator
  # labels:
  # Set timeout for scrape
  # timeout: 10s
  # Set of labels to transfer from the Kubernetes Service onto the target
  # targetLabels: []
  # MetricRelabelConfigs to apply to samples before ingestion
  # metricRelabelings: []
  # Set relabel_configs as per https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
  # relabelings: []
